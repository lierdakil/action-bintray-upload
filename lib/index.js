"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core = require("@actions/core");
const github = require("@actions/github");
const bintray_ts_1 = require("bintray-ts");
const glob = require("glob");
async function run() {
    const username = core.getInput('username');
    const apikey = core.getInput('apikey');
    const subject = core.getInput('subject') || username;
    const repository = core.getInput('repository');
    const pkg = core.getInput('package');
    const createPkg = core.getInput('createPkg');
    const version = core.getInput('version');
    const versionDescription = core.getInput('versionDescription');
    const versionVcsTag = core.getInput('versionVcsTag');
    const filesGlob = core.getInput('filesGlob');
    const bt = new bintray_ts_1.Bintray(username, apikey, subject);
    const br = bt.repository(repository);
    await br.info();
    const bp = br.package(pkg);
    try {
        await bp.info();
    }
    catch (e) {
        if (!createPkg)
            throw e;
        console.error(e);
        await bp.create({
            licenses: core.getInput('licenses').split(','),
            vcs_url: `https://github.com/${github.context.repo.owner}/${github.context.repo.repo}.git`,
        });
    }
    const bv = bp.version(version);
    try {
        await bv.info();
    }
    catch (e) {
        console.error(e);
        await bv.create({
            desc: versionDescription || '',
            vcs_tag: versionVcsTag || undefined,
        });
    }
    const gfiles = await new Promise((resolve, reject) => {
        glob(filesGlob, (error, result) => {
            if (error)
                reject(error);
            else
                resolve(result);
        });
    });
    await Promise.all(gfiles.map((f) => bv.uploadContent(f)));
    await bv.publishContent();
}
run().catch((err) => core.setFailed(err.message));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBc0M7QUFDdEMsMENBQTBDO0FBQzFDLDJDQUFvQztBQUNwQyw2QkFBNkI7QUFFN0IsS0FBSyxVQUFVLEdBQUc7SUFDaEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUMxQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3RDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFBO0lBQ3BELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDOUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUNwQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQzVDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDeEMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUE7SUFDOUQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUNwRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBRTVDLE1BQU0sRUFBRSxHQUFHLElBQUksb0JBQU8sQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ2pELE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDcEMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDZixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQzFCLElBQUk7UUFDRixNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtLQUNoQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsSUFBSSxDQUFDLFNBQVM7WUFBRSxNQUFNLENBQUMsQ0FBQTtRQUN2QixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2hCLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQztZQUNkLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQVU7WUFDdkQsT0FBTyxFQUFFLHNCQUFzQixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNO1NBQzNGLENBQUMsQ0FBQTtLQUNIO0lBQ0QsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUM5QixJQUFJO1FBQ0YsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDaEI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDaEIsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDO1lBQ2QsSUFBSSxFQUFFLGtCQUFrQixJQUFJLEVBQUU7WUFDOUIsT0FBTyxFQUFFLGFBQWEsSUFBSSxTQUFTO1NBQ3BDLENBQUMsQ0FBQTtLQUNIO0lBQ0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLE9BQU8sQ0FBVyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUM3RCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ2hDLElBQUksS0FBSztnQkFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7O2dCQUNuQixPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDdEIsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUNGLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6RCxNQUFNLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtBQUMzQixDQUFDO0FBRUQsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvcmUgPSByZXF1aXJlKCdAYWN0aW9ucy9jb3JlJylcbmltcG9ydCBnaXRodWIgPSByZXF1aXJlKCdAYWN0aW9ucy9naXRodWInKVxuaW1wb3J0IHsgQmludHJheSB9IGZyb20gJ2JpbnRyYXktdHMnXG5pbXBvcnQgZ2xvYiA9IHJlcXVpcmUoJ2dsb2InKVxuXG5hc3luYyBmdW5jdGlvbiBydW4oKSB7XG4gIGNvbnN0IHVzZXJuYW1lID0gY29yZS5nZXRJbnB1dCgndXNlcm5hbWUnKVxuICBjb25zdCBhcGlrZXkgPSBjb3JlLmdldElucHV0KCdhcGlrZXknKVxuICBjb25zdCBzdWJqZWN0ID0gY29yZS5nZXRJbnB1dCgnc3ViamVjdCcpIHx8IHVzZXJuYW1lXG4gIGNvbnN0IHJlcG9zaXRvcnkgPSBjb3JlLmdldElucHV0KCdyZXBvc2l0b3J5JylcbiAgY29uc3QgcGtnID0gY29yZS5nZXRJbnB1dCgncGFja2FnZScpXG4gIGNvbnN0IGNyZWF0ZVBrZyA9IGNvcmUuZ2V0SW5wdXQoJ2NyZWF0ZVBrZycpXG4gIGNvbnN0IHZlcnNpb24gPSBjb3JlLmdldElucHV0KCd2ZXJzaW9uJylcbiAgY29uc3QgdmVyc2lvbkRlc2NyaXB0aW9uID0gY29yZS5nZXRJbnB1dCgndmVyc2lvbkRlc2NyaXB0aW9uJylcbiAgY29uc3QgdmVyc2lvblZjc1RhZyA9IGNvcmUuZ2V0SW5wdXQoJ3ZlcnNpb25WY3NUYWcnKVxuICBjb25zdCBmaWxlc0dsb2IgPSBjb3JlLmdldElucHV0KCdmaWxlc0dsb2InKVxuXG4gIGNvbnN0IGJ0ID0gbmV3IEJpbnRyYXkodXNlcm5hbWUsIGFwaWtleSwgc3ViamVjdClcbiAgY29uc3QgYnIgPSBidC5yZXBvc2l0b3J5KHJlcG9zaXRvcnkpXG4gIGF3YWl0IGJyLmluZm8oKVxuICBjb25zdCBicCA9IGJyLnBhY2thZ2UocGtnKVxuICB0cnkge1xuICAgIGF3YWl0IGJwLmluZm8oKVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKCFjcmVhdGVQa2cpIHRocm93IGVcbiAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgYXdhaXQgYnAuY3JlYXRlKHtcbiAgICAgIGxpY2Vuc2VzOiBjb3JlLmdldElucHV0KCdsaWNlbnNlcycpLnNwbGl0KCcsJykgYXMgYW55W10sXG4gICAgICB2Y3NfdXJsOiBgaHR0cHM6Ly9naXRodWIuY29tLyR7Z2l0aHViLmNvbnRleHQucmVwby5vd25lcn0vJHtnaXRodWIuY29udGV4dC5yZXBvLnJlcG99LmdpdGAsXG4gICAgfSlcbiAgfVxuICBjb25zdCBidiA9IGJwLnZlcnNpb24odmVyc2lvbilcbiAgdHJ5IHtcbiAgICBhd2FpdCBidi5pbmZvKClcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZSlcbiAgICBhd2FpdCBidi5jcmVhdGUoe1xuICAgICAgZGVzYzogdmVyc2lvbkRlc2NyaXB0aW9uIHx8ICcnLFxuICAgICAgdmNzX3RhZzogdmVyc2lvblZjc1RhZyB8fCB1bmRlZmluZWQsXG4gICAgfSlcbiAgfVxuICBjb25zdCBnZmlsZXMgPSBhd2FpdCBuZXcgUHJvbWlzZTxzdHJpbmdbXT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGdsb2IoZmlsZXNHbG9iLCAoZXJyb3IsIHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKGVycm9yKSByZWplY3QoZXJyb3IpXG4gICAgICBlbHNlIHJlc29sdmUocmVzdWx0KVxuICAgIH0pXG4gIH0pXG4gIGF3YWl0IFByb21pc2UuYWxsKGdmaWxlcy5tYXAoKGYpID0+IGJ2LnVwbG9hZENvbnRlbnQoZikpKVxuICBhd2FpdCBidi5wdWJsaXNoQ29udGVudCgpXG59XG5cbnJ1bigpLmNhdGNoKChlcnIpID0+IGNvcmUuc2V0RmFpbGVkKGVyci5tZXNzYWdlKSlcbiJdfQ==