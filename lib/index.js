"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core = require("@actions/core");
const bintray_ts_1 = require("bintray-ts");
const glob = require("glob");
async function run() {
    const username = core.getInput('username');
    const apikey = core.getInput('apikey');
    const subject = core.getInput('subject') || username;
    const repository = core.getInput('repository');
    const pkg = core.getInput('package');
    const version = core.getInput('version');
    const versionDescription = core.getInput('versionDescription');
    const versionVcsTag = core.getInput('versionVcsTag');
    const filesGlob = core.getInput('filesGlob');
    const bt = new bintray_ts_1.Bintray(username, apikey, subject);
    const br = bt.repository(repository);
    await br.info();
    const bp = br.package(pkg);
    await bp.info();
    const bv = bp.version(version);
    try {
        await bv.info();
    }
    catch (e) {
        console.error(e);
        await bv.create({
            desc: versionDescription || '',
            vcs_tag: versionVcsTag || undefined,
        });
    }
    const gfiles = await new Promise((resolve, reject) => {
        glob(filesGlob, (error, result) => {
            if (error)
                reject(error);
            else
                resolve(result);
        });
    });
    await Promise.all(gfiles.map((f) => bv.uploadContent(f)));
    await bv.publishContent();
}
run().catch((err) => core.setFailed(err.message));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBc0M7QUFDdEMsMkNBQW9DO0FBQ3BDLDZCQUE2QjtBQUU3QixLQUFLLFVBQVUsR0FBRztJQUNoQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzFDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDdEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUE7SUFDcEQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUM5QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3BDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDeEMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUE7SUFDOUQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUNwRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBRTVDLE1BQU0sRUFBRSxHQUFHLElBQUksb0JBQU8sQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ2pELE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDcEMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDZixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQzFCLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO0lBQ2YsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUM5QixJQUFJO1FBQ0YsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7S0FDaEI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDaEIsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDO1lBQ2QsSUFBSSxFQUFFLGtCQUFrQixJQUFJLEVBQUU7WUFDOUIsT0FBTyxFQUFFLGFBQWEsSUFBSSxTQUFTO1NBQ3BDLENBQUMsQ0FBQTtLQUNIO0lBQ0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLE9BQU8sQ0FBVyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUM3RCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ2hDLElBQUksS0FBSztnQkFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7O2dCQUNuQixPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDdEIsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUNGLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6RCxNQUFNLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtBQUMzQixDQUFDO0FBRUQsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvcmUgPSByZXF1aXJlKCdAYWN0aW9ucy9jb3JlJylcbmltcG9ydCB7IEJpbnRyYXkgfSBmcm9tICdiaW50cmF5LXRzJ1xuaW1wb3J0IGdsb2IgPSByZXF1aXJlKCdnbG9iJylcblxuYXN5bmMgZnVuY3Rpb24gcnVuKCkge1xuICBjb25zdCB1c2VybmFtZSA9IGNvcmUuZ2V0SW5wdXQoJ3VzZXJuYW1lJylcbiAgY29uc3QgYXBpa2V5ID0gY29yZS5nZXRJbnB1dCgnYXBpa2V5JylcbiAgY29uc3Qgc3ViamVjdCA9IGNvcmUuZ2V0SW5wdXQoJ3N1YmplY3QnKSB8fCB1c2VybmFtZVxuICBjb25zdCByZXBvc2l0b3J5ID0gY29yZS5nZXRJbnB1dCgncmVwb3NpdG9yeScpXG4gIGNvbnN0IHBrZyA9IGNvcmUuZ2V0SW5wdXQoJ3BhY2thZ2UnKVxuICBjb25zdCB2ZXJzaW9uID0gY29yZS5nZXRJbnB1dCgndmVyc2lvbicpXG4gIGNvbnN0IHZlcnNpb25EZXNjcmlwdGlvbiA9IGNvcmUuZ2V0SW5wdXQoJ3ZlcnNpb25EZXNjcmlwdGlvbicpXG4gIGNvbnN0IHZlcnNpb25WY3NUYWcgPSBjb3JlLmdldElucHV0KCd2ZXJzaW9uVmNzVGFnJylcbiAgY29uc3QgZmlsZXNHbG9iID0gY29yZS5nZXRJbnB1dCgnZmlsZXNHbG9iJylcblxuICBjb25zdCBidCA9IG5ldyBCaW50cmF5KHVzZXJuYW1lLCBhcGlrZXksIHN1YmplY3QpXG4gIGNvbnN0IGJyID0gYnQucmVwb3NpdG9yeShyZXBvc2l0b3J5KVxuICBhd2FpdCBici5pbmZvKClcbiAgY29uc3QgYnAgPSBici5wYWNrYWdlKHBrZylcbiAgYXdhaXQgYnAuaW5mbygpXG4gIGNvbnN0IGJ2ID0gYnAudmVyc2lvbih2ZXJzaW9uKVxuICB0cnkge1xuICAgIGF3YWl0IGJ2LmluZm8oKVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihlKVxuICAgIGF3YWl0IGJ2LmNyZWF0ZSh7XG4gICAgICBkZXNjOiB2ZXJzaW9uRGVzY3JpcHRpb24gfHwgJycsXG4gICAgICB2Y3NfdGFnOiB2ZXJzaW9uVmNzVGFnIHx8IHVuZGVmaW5lZCxcbiAgICB9KVxuICB9XG4gIGNvbnN0IGdmaWxlcyA9IGF3YWl0IG5ldyBQcm9taXNlPHN0cmluZ1tdPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZ2xvYihmaWxlc0dsb2IsIChlcnJvciwgcmVzdWx0KSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHJlamVjdChlcnJvcilcbiAgICAgIGVsc2UgcmVzb2x2ZShyZXN1bHQpXG4gICAgfSlcbiAgfSlcbiAgYXdhaXQgUHJvbWlzZS5hbGwoZ2ZpbGVzLm1hcCgoZikgPT4gYnYudXBsb2FkQ29udGVudChmKSkpXG4gIGF3YWl0IGJ2LnB1Ymxpc2hDb250ZW50KClcbn1cblxucnVuKCkuY2F0Y2goKGVycikgPT4gY29yZS5zZXRGYWlsZWQoZXJyLm1lc3NhZ2UpKVxuIl19