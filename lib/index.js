"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core = require("@actions/core");
const github = require("@actions/github");
const bintray_ts_1 = require("bintray-ts");
const glob = require("glob");
async function run() {
    const username = core.getInput('username');
    const apikey = core.getInput('apikey');
    const subject = core.getInput('subject') || username;
    const repository = core.getInput('repository');
    const pkg = core.getInput('package');
    const createPkg = core.getInput('createPkg');
    const version = core.getInput('version');
    const versionDescription = core.getInput('versionDescription');
    const versionVcsTag = core.getInput('versionVcsTag');
    const filesGlob = core.getInput('filesGlob');
    try {
        const bt = new bintray_ts_1.Bintray(username, apikey, subject);
        const br = bt.repository(repository);
        await br.info();
        const bp = br.package(pkg);
        try {
            console.log('Checking for package...');
            await bp.info();
        }
        catch (e) {
            if (!createPkg)
                throw e;
            console.error(e);
            console.log((await e.responseBody).toString());
            console.log("Package doesn't seem to exist, creating...");
            await bp.create({
                licenses: core.getInput('licenses').split(','),
                vcs_url: `https://github.com/${github.context.repo.owner}/${github.context.repo.repo}.git`,
            });
        }
        const bv = bp.version(version);
        try {
            console.log('Checking for version...');
            await bv.info();
        }
        catch (e) {
            console.error(e);
            console.log((await e.responseBody).toString());
            console.log('Version does not seem to exist, creating...');
            await bv.create({
                desc: versionDescription || '',
                vcs_tag: versionVcsTag || undefined,
            });
        }
        console.log('Gathering assets...');
        const gfiles = await new Promise((resolve, reject) => {
            glob(filesGlob, (error, result) => {
                if (error)
                    reject(error);
                else
                    resolve(result);
            });
        });
        console.log('Uploading assets...');
        await Promise.all(gfiles.map((f) => bv.uploadContent(f)));
        console.log('Publishing revision...');
        await bv.publishContent();
    }
    catch (e) {
        console.log('Failed');
        console.error(e);
        console.log((await e.responseBody).toString());
        core.setFailed(e.message);
    }
}
run().catch((err) => core.setFailed(err.message));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBc0M7QUFDdEMsMENBQTBDO0FBQzFDLDJDQUFvQztBQUNwQyw2QkFBNkI7QUFFN0IsS0FBSyxVQUFVLEdBQUc7SUFDaEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUMxQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3RDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksUUFBUSxDQUFBO0lBQ3BELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDOUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUNwQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQzVDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDeEMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUE7SUFDOUQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUNwRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBRTVDLElBQUk7UUFDRixNQUFNLEVBQUUsR0FBRyxJQUFJLG9CQUFPLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUNqRCxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3BDLE1BQU0sRUFB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OUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7S0FDMUI7QUFDSCxDQUFDO0FBRUQsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvcmUgPSByZXF1aXJlKCdAYWN0aW9ucy9jb3JlJylcbmltcG9ydCBnaXRodWIgPSByZXF1aXJlKCdAYWN0aW9ucy9naXRodWInKVxuaW1wb3J0IHsgQmludHJheSB9IGZyb20gJ2JpbnRyYXktdHMnXG5pbXBvcnQgZ2xvYiA9IHJlcXVpcmUoJ2dsb2InKVxuXG5hc3luYyBmdW5jdGlvbiBydW4oKSB7XG4gIGNvbnN0IHVzZXJuYW1lID0gY29yZS5nZXRJbnB1dCgndXNlcm5hbWUnKVxuICBjb25zdCBhcGlrZXkgPSBjb3JlLmdldElucHV0KCdhcGlrZXknKVxuICBjb25zdCBzdWJqZWN0ID0gY29yZS5nZXRJbnB1dCgnc3ViamVjdCcpIHx8IHVzZXJuYW1lXG4gIGNvbnN0IHJlcG9zaXRvcnkgPSBjb3JlLmdldElucHV0KCdyZXBvc2l0b3J5JylcbiAgY29uc3QgcGtnID0gY29yZS5nZXRJbnB1dCgncGFja2FnZScpXG4gIGNvbnN0IGNyZWF0ZVBrZyA9IGNvcmUuZ2V0SW5wdXQoJ2NyZWF0ZVBrZycpXG4gIGNvbnN0IHZlcnNpb24gPSBjb3JlLmdldElucHV0KCd2ZXJzaW9uJylcbiAgY29uc3QgdmVyc2lvbkRlc2NyaXB0aW9uID0gY29yZS5nZXRJbnB1dCgndmVyc2lvbkRlc2NyaXB0aW9uJylcbiAgY29uc3QgdmVyc2lvblZjc1RhZyA9IGNvcmUuZ2V0SW5wdXQoJ3ZlcnNpb25WY3NUYWcnKVxuICBjb25zdCBmaWxlc0dsb2IgPSBjb3JlLmdldElucHV0KCdmaWxlc0dsb2InKVxuXG4gIHRyeSB7XG4gICAgY29uc3QgYnQgPSBuZXcgQmludHJheSh1c2VybmFtZSwgYXBpa2V5LCBzdWJqZWN0KVxuICAgIGNvbnN0IGJyID0gYnQucmVwb3NpdG9yeShyZXBvc2l0b3J5KVxuICAgIGF3YWl0IGJyLmluZm8oKVxuICAgIGNvbnN0IGJwID0gYnIucGFja2FnZShwa2cpXG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCdDaGVja2luZyBmb3IgcGFja2FnZS4uLicpXG4gICAgICBhd2FpdCBicC5pbmZvKClcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoIWNyZWF0ZVBrZykgdGhyb3cgZVxuICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgICAgY29uc29sZS5sb2coKGF3YWl0IGUucmVzcG9uc2VCb2R5KS50b1N0cmluZygpKVxuICAgICAgY29uc29sZS5sb2coXCJQYWNrYWdlIGRvZXNuJ3Qgc2VlbSB0byBleGlzdCwgY3JlYXRpbmcuLi5cIilcbiAgICAgIGF3YWl0IGJwLmNyZWF0ZSh7XG4gICAgICAgIGxpY2Vuc2VzOiBjb3JlLmdldElucHV0KCdsaWNlbnNlcycpLnNwbGl0KCcsJykgYXMgYW55W10sXG4gICAgICAgIHZjc191cmw6IGBodHRwczovL2dpdGh1Yi5jb20vJHtnaXRodWIuY29udGV4dC5yZXBvLm93bmVyfS8ke2dpdGh1Yi5jb250ZXh0LnJlcG8ucmVwb30uZ2l0YCxcbiAgICAgIH0pXG4gICAgfVxuICAgIGNvbnN0IGJ2ID0gYnAudmVyc2lvbih2ZXJzaW9uKVxuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygnQ2hlY2tpbmcgZm9yIHZlcnNpb24uLi4nKVxuICAgICAgYXdhaXQgYnYuaW5mbygpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgICAgY29uc29sZS5sb2coKGF3YWl0IGUucmVzcG9uc2VCb2R5KS50b1N0cmluZygpKVxuICAgICAgY29uc29sZS5sb2coJ1ZlcnNpb24gZG9lcyBub3Qgc2VlbSB0byBleGlzdCwgY3JlYXRpbmcuLi4nKVxuICAgICAgYXdhaXQgYnYuY3JlYXRlKHtcbiAgICAgICAgZGVzYzogdmVyc2lvbkRlc2NyaXB0aW9uIHx8ICcnLFxuICAgICAgICB2Y3NfdGFnOiB2ZXJzaW9uVmNzVGFnIHx8IHVuZGVmaW5lZCxcbiAgICAgIH0pXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCdHYXRoZXJpbmcgYXNzZXRzLi4uJylcbiAgICBjb25zdCBnZmlsZXMgPSBhd2FpdCBuZXcgUHJvbWlzZTxzdHJpbmdbXT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZ2xvYihmaWxlc0dsb2IsIChlcnJvciwgcmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChlcnJvcikgcmVqZWN0KGVycm9yKVxuICAgICAgICBlbHNlIHJlc29sdmUocmVzdWx0KVxuICAgICAgfSlcbiAgICB9KVxuICAgIGNvbnNvbGUubG9nKCdVcGxvYWRpbmcgYXNzZXRzLi4uJylcbiAgICBhd2FpdCBQcm9taXNlLmFsbChnZmlsZXMubWFwKChmKSA9PiBidi51cGxvYWRDb250ZW50KGYpKSlcbiAgICBjb25zb2xlLmxvZygnUHVibGlzaGluZyByZXZpc2lvbi4uLicpXG4gICAgYXdhaXQgYnYucHVibGlzaENvbnRlbnQoKVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coJ0ZhaWxlZCcpXG4gICAgY29uc29sZS5lcnJvcihlKVxuICAgIGNvbnNvbGUubG9nKChhd2FpdCBlLnJlc3BvbnNlQm9keSkudG9TdHJpbmcoKSlcbiAgICBjb3JlLnNldEZhaWxlZChlLm1lc3NhZ2UpXG4gIH1cbn1cblxucnVuKCkuY2F0Y2goKGVycikgPT4gY29yZS5zZXRGYWlsZWQoZXJyLm1lc3NhZ2UpKVxuIl19